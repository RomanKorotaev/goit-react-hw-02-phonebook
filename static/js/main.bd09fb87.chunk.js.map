{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactsList/ContactsList.module.css","logo.svg","components/ContactForm/ContactForm.js","components/ContactsList/ContacsList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/ContactForm/ContactForm.module.css","App.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","currentTarget","setState","value","console","log","handleFormSubmit","preventDefault","data","props","onFormSubmit","reset","onSubmit","this","className","s","nameTitle","inputStyleClass","type","onChange","placeholder","pattern","title","required","addBtm","Component","ContactsList","contacts","map","id","item","Filter","filterTitle","filterInputStyle","handleFilter","App","filter","formSubmitHandler","newContact","shortid","generate","prevState","changeFilter","getVisibleContact","normalizedFilter","toLowerCase","contact","includes","visibleContacts","container","titlePhonebook","contactsTitle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd09fb87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterTitle\":\"Filter_filterTitle__1lHD7\",\"filterInputStyle\":\"Filter_filterInputStyle__W27cI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsListTitle\":\"ContactsList_contactsListTitle__3OiEN\",\"item\":\"ContactsList_item__EuZth\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  // Это единый обработчик для разных элементов. Выбираем нужный по атрибуту name (задать каждому элементу свой)\r\n  // и через вычисляемое (диннамическое) свойство объекта присваеваем нужному элементу нужное велью\r\n  handleChange = (e) => {\r\n    const {name} = e.currentTarget;\r\n\r\n        this.setState({ \r\n             [name]: e.currentTarget.value\r\n             });\r\n\r\n        console.log(\"Сработало изменение инпута Form.js)\", e);\r\n        console.log(\"e.currentTarget.value: \", e.currentTarget.value);\r\n        console.log(\"e.currentTarget.name: \", e.currentTarget.name);\r\n\r\n  };\r\n\r\n\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Сработал сабмит формы при клике на кнопку эдд\");\r\n    console.log(\"this.state : \", this.state);\r\n\r\n    // Записываем  переменные имени и телефона, напечатанные в форме, в объект\r\n    const data = {\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    }\r\n\r\n    // Передаём объект с новыми данными из формы как пареметр функции - для передачи в Арр (поднятие состояния)\r\n    this.props.onFormSubmit(data);\r\n\r\n    // Очищаем поля формы\r\n    this.reset();\r\n  };\r\n\r\n  // Метод очистки полей Формы\r\n  reset = () => {\r\n    console.log(\"Сработал    reset \");\r\n    this.setState ( {\r\n       name: \"\",\r\n      number: \"\" },\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // <form onSubmit={this.props.onFormSubmit}>\r\n      <form onSubmit={this.handleFormSubmit}>\r\n      \r\n        <label className={s.nameTitle}>\r\n          Name:\r\n          <input\r\n          className={s.inputStyleClass }\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            placeholder=\"Введите имя\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n      \r\n\r\n        <label className={s.nameTitle}>\r\n          Number:\r\n          <input\r\n              className={s.inputStyleClass }\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              placeholder=\"Введите номер: 000-00-00\"\r\n              required\r\n          />\r\n                </label> \r\n\r\n        <button className={s.addBtm}  type=\"submit\"> Add contact </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React, { Component } from \"react\";\r\nimport s from \"./ContactsList.module.css\";\r\n\r\nclass ContactsList extends Component {\r\n  render() {\r\n    const { contacts } = this.props;\r\n\r\n    return (\r\n      <ul >\r\n        {/* <span className= {s.contactsListTitle}>Contacts</span> */}\r\n        {contacts.map(({id, name, number}) => (\r\n          <li  className= {s.item} key = {id}>\r\n            <p> <span> {name}</span> <span>{number}</span></p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactsList;\r\n\r\n// const TodoList = ({ todos, onDeleteTodo }) => (\r\n//   <ul className=\"TodoList\">\r\n//     {todos.map(({ id, text }) => (\r\n//       <li key={id} className=\"TodoList__item\">\r\n//         <p className=\"TodoList__text\">{text}</p>\r\n//         <button onClick={() => onDeleteTodo(id)}>Удалить</button>\r\n//       </li>\r\n//     ))}\r\n//   </ul>\r\n// );\r\n\r\n// export default TodoList;\r\n","import React, { Component } from \"react\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nclass Filter extends Component {\r\n\r\n    render() {\r\n        // const {value, handleFilter} = this.props;\r\n\r\n        return (\r\n            <label className = {s.filterTitle}>\r\n                  Find contacts by name:\r\n                    <input\r\n                    className ={s.filterInputStyle}\r\n                      type=\"text\"\r\n                      name=\"filter\"\r\n                      value = {this.props.value} \r\n                      \r\n                     onChange={this.props.handleFilter} \r\n                      placeholder=\"Введите имя для поиска контакта\"\r\n                  />\r\n                </label> \r\n        )\r\n    }\r\n}\r\n\r\nexport default Filter;","import logo from \"./logo.svg\";\r\nimport s from \"./App.module.css\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport shortid from 'shortid'\r\n\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactsList from \"./components/ContactsList\";\r\nimport Filter from \"./components/Filter\";\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    // contacts: [\"Adrian\", \"Jacob Mercer\", \"Charles de Batz\"],\r\n    contacts: [\r\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n    ],\r\n    name: \"\",\r\n    filter: \"\",\r\n  };\r\n\r\n  formSubmitHandler = (data) => {\r\n    console.log(\"formSubmitHandler\");\r\n    console.log(\"Новый контакт ( data ) : \", data);\r\n \r\n    const newContact = {\r\n      id: shortid.generate(),\r\n      name: data.name,\r\n      number: data.number\r\n    }\r\n\r\n    // Обновляем прежнее состояние массива через распыление\r\n    this.setState((prevState) => {\r\n      return {\r\n        contacts: [newContact, ...prevState.contacts ],\r\n      };\r\n    });\r\n  };\r\n\r\n  changeFilter = e => {\r\n    this.setState ({ filter: e.currentTarget.value })\r\n  }\r\n\r\n\r\n  getVisibleContact = () => {\r\n    const {filter, contacts } =  this.state;\r\n    //Приводим значение фильтра к нижнему регистру (и в функции проверки имена тоже будем приводить к нижнему регистру)\r\n    const  normalizedFilter = filter.toLowerCase ();\r\n\r\n    //Используем метод Array.filter() c MDN. Проверяем есть ли значение из фильтра в массиве контактов (ищем по значению имени)\r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n  }\r\n\r\n  render() {\r\n\r\n    //Создание фильтра\r\n  //Приводим значение фильтра к нижнему регистру (и в функции проверки имена тоже будем приводить к нижнему регистру)\r\n// const  normalizedFilter = this.state.filter.toLowerCase ();\r\n// const visibleContacts = this.state.contacts.filter(contact =>\r\n//    contact.name.toLowerCase().includes(normalizedFilter));\r\n\r\nconst visibleContacts = this.getVisibleContact();\r\n\r\n\r\nconsole.log (\"Рендерим из  App текущий список контактов : \", this.state.contacts)\r\n\r\n    const { contacts } = this.state;\r\n    return (\r\n      <div className={s.container}>\r\n         \r\n         <h1 className={s.titlePhonebook}>Phonebook</h1>\r\n         <ContactForm name={this.state.name}  number={this.state.number} onFormSubmit={this.formSubmitHandler} />\r\n       \r\n\r\n        <h2 className={s.contactsTitle}>Contacts</h2>\r\n\r\n          {/* Это фильтр. Его значение мы не будем хранить в state стейте данной формы. Значение живого фильтра будет хранится в стейте App */}\r\n          <Filter value = {this.state.filter} handleFilter = {this.changeFilter}/>\r\n\r\n          {/* <ContactsList contacts={contacts} /> */}\r\n          <ContactsList contacts={visibleContacts} />       \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameTitle\":\"ContactForm_nameTitle__1Ziop\",\"inputStyleClass\":\"ContactForm_inputStyleClass__1i9qX\",\"addBtm\":\"ContactForm_addBtm__3YfBl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1QidY\",\"titlePhonebook\":\"App_titlePhonebook__bbAOY\",\"contactsTitle\":\"App_contactsTitle__2KXGH\"};"],"sourceRoot":""}