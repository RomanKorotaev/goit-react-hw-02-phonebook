{"version":3,"sources":["components/Filter/Filter.module.css","logo.svg","components/ContactForm/ContactForm.js","components/ContactsList/ContacsList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/ContactForm/ContactForm.module.css","App.module.css","components/ContactsList/ContactsList.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","currentTarget","setState","value","handleFormSubmit","preventDefault","console","log","data","props","onFormSubmit","reset","onSubmit","this","className","s","nameTitle","inputStyleClass","type","onChange","placeholder","pattern","title","required","addBtm","Component","ContactsList","contacts","deleteContact","contactId","prevState","filter","contact","id","onDeleteContact","ContactsListStyle","map","item","deleteBtn","onClick","Filter","filterTitle","filterInputStyle","handleFilter","App","formSubmitHandler","newContact","shortid","generate","isExist","changeFilter","getVisibleContact","normalizedFilter","toLowerCase","includes","normalizedNewName","tmpArray","length","alert","visibleContacts","container","titlePhonebook","contactsTitle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.868fc7bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterTitle\":\"Filter_filterTitle__1lHD7\",\"filterInputStyle\":\"Filter_filterInputStyle__W27cI\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  // Это единый обработчик для разных элементов. Выбираем нужный по атрибуту name (задать каждому элементу свой)\r\n  // и через вычисляемое (диннамическое) свойство объекта присваеваем нужному элементу нужное велью\r\n  handleChange = (e) => {\r\n    const {name} = e.currentTarget;\r\n\r\n        this.setState({ \r\n             [name]: e.currentTarget.value\r\n             });\r\n\r\n        // console.log(\"Сработало изменение инпута Form.js)\", e);\r\n        // console.log(\"e.currentTarget.value: \", e.currentTarget.value);\r\n        // console.log(\"e.currentTarget.name: \", e.currentTarget.name);\r\n\r\n  };\r\n\r\n\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Сработал сабмит формы при клике на кнопку эдд\");\r\n    console.log(\"this.state : \", this.state);\r\n\r\n    // Записываем  переменные имени и телефона, напечатанные в форме, в объект\r\n    const data = {\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    }\r\n\r\n    // Передаём объект с новыми данными из формы как пареметр функции - для передачи в Арр (поднятие состояния)\r\n    this.props.onFormSubmit(data);\r\n\r\n    // Очищаем поля формы\r\n    this.reset();\r\n  };\r\n\r\n  // Метод очистки полей Формы\r\n  reset = () => {\r\n    console.log(\"Сработал    reset \");\r\n    this.setState ( {\r\n       name: \"\",\r\n      number: \"\" },\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // <form onSubmit={this.props.onFormSubmit}>\r\n      <form onSubmit={this.handleFormSubmit}>\r\n      \r\n        <label className={s.nameTitle}>\r\n          Name:\r\n          <input\r\n          className={s.inputStyleClass }\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            placeholder=\"Введите имя\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n      \r\n\r\n        <label className={s.nameTitle}>\r\n          Number:\r\n          <input\r\n              className={s.inputStyleClass }\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              placeholder=\"Введите номер: 000-00-00\"\r\n              required\r\n          />\r\n                </label> \r\n\r\n        <button className={s.addBtm}  type=\"submit\"> Add contact </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nContactForm.propTypes = {\r\n \r\n  state: PropTypes.arrayOf(\r\n    // Объект с определённой структурой\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\n\r\nexport default ContactForm;\r\n","import React, { Component } from \"react\";\r\nimport s from \"./ContactsList.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass ContactsList extends Component {\r\n\r\n  state = {\r\n    \r\n    contacts: [ ],\r\n  };\r\n\r\n  deleteContact = (contactId) => {\r\n    this.setState ( prevState => ({\r\n      contacts: prevState.contacts.filter ( contact=> contact.id !== contactId)\r\n    }) )\r\n  }\r\n\r\n\r\n  render() {\r\n    const { contacts, onDeleteContact } = this.props;\r\n\r\n    return (\r\n      <ul className= {s.ContactsListStyle}>\r\n        {/* <span className= {s.contactsListTitle}>Contacts</span> */}\r\n        {contacts.map(({id, name, number}) => (\r\n          <li  className= {s.item} key = {id}>\r\n            <p> <span> {name} : </span> <span>{number}</span></p >\r\n\r\n            <button type=\"button\"\r\n            className ={s.deleteBtn}\r\n             onClick ={ () => onDeleteContact(id) }\r\n              >Delete</button>\r\n\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nContactsList.propTypes = {\r\n \r\n  state: PropTypes.arrayOf(\r\n    // Объект с определённой структурой\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ), \r\n};\r\n\r\nexport default ContactsList;\r\n\r\n","import React, { Component } from \"react\";\r\nimport s from \"./Filter.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Filter extends Component {\r\n\r\n    render() {\r\n        // const {value, handleFilter} = this.props;\r\n\r\n        return (\r\n            <label className = {s.filterTitle}>\r\n                  Find contacts by name:\r\n                    <input\r\n                    className ={s.filterInputStyle}\r\n                      type=\"text\"\r\n                      name=\"filter\"\r\n                      value = {this.props.value} \r\n                      \r\n                     onChange={this.props.handleFilter} \r\n                      placeholder=\"Введите имя для поиска контакта\"\r\n                  />\r\n                </label> \r\n        )\r\n    }\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n }\r\n\r\nexport default Filter;","import logo from \"./logo.svg\";\r\nimport s from \"./App.module.css\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport shortid from 'shortid'\r\n\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactsList from \"./components/ContactsList\";\r\nimport Filter from \"./components/Filter\";\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    // contacts: [\"Adrian\", \"Jacob Mercer\", \"Charles de Batz\"],\r\n    contacts: [\r\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n    ],\r\n    name: \"\",\r\n    filter: \"\",\r\n  };\r\n\r\n  formSubmitHandler = (data) => {\r\n    console.log(\"formSubmitHandler\");\r\n    console.log(\"Новый контакт ( data ) : \", data);\r\n \r\n    const newContact = {\r\n      id: shortid.generate(),\r\n      name: data.name,\r\n      number: data.number\r\n    }\r\n\r\n\r\n    if ( this.isExist(data) ) {\r\n      // если функция isExist возврвтит true, то такой контакт уже есть и мы сразу выходим, ничего не добавляем в список\r\n      return;\r\n        } else {\r\n                // Обновляем прежнее состояние массива через распыление\r\n                this.setState((prevState) => {\r\n                    return {\r\n                      contacts: [newContact, ...prevState.contacts ],\r\n                        };\r\n                  });\r\n              }         \r\n    \r\n  };\r\n\r\n  changeFilter = e => {\r\n    this.setState ({ filter: e.currentTarget.value })\r\n  }\r\n\r\n\r\n  getVisibleContact = () => {\r\n    const {filter, contacts } =  this.state;\r\n    //Приводим значение фильтра к нижнему регистру (и в функции проверки имена тоже будем приводить к нижнему регистру)\r\n    const  normalizedFilter = filter.toLowerCase ();\r\n\r\n    //Используем метод Array.filter() c MDN. Проверяем есть ли значение из фильтра в массиве контактов (ищем по значению имени)\r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n  }\r\n\r\n\r\n  // Функция о выводе предупреждения, если пользователь хочет добавить контакты, имена которых уже есть в телефонной книге.\r\n  //Её вызов делаем внутри функции сабмита формы formSubmitHandler\r\n  isExist  = (data) => {\r\n    //из нового полученного объекта с новым контактом берём name переводим в нижний регистр и ищем такие же имена в существующем списке контактов\r\n    const { contacts } =  this.state;\r\n    const  normalizedNewName = data.name.toLowerCase ();\r\n    const tmpArray = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedNewName));\r\n\r\n    if (tmpArray.length!==0) {\r\n      alert (`${tmpArray[0].name} is already in contacts`)\r\n       return true;\r\n      } else {\r\n        return false;\r\n       }\r\n\r\n  }\r\n\r\n  deleteContact = (contactId) => {\r\n    this.setState ( prevState => ({\r\n      contacts: prevState.contacts.filter ( contact=> contact.id !== contactId)\r\n    }) )\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    //Создание фильтра\r\n  //Приводим значение фильтра к нижнему регистру (и в функции проверки имена тоже будем приводить к нижнему регистру)\r\n// const  normalizedFilter = this.state.filter.toLowerCase ();\r\n// const visibleContacts = this.state.contacts.filter(contact =>\r\n//    contact.name.toLowerCase().includes(normalizedFilter));\r\n\r\nconst visibleContacts = this.getVisibleContact();\r\n\r\n\r\nconsole.log (\"Рендерим из  App текущий список контактов : \", this.state.contacts)\r\n\r\n    const { contacts } = this.state;\r\n    return (\r\n      <div className={s.container}>\r\n         \r\n         <h1 className={s.titlePhonebook}>Phonebook</h1>\r\n         <ContactForm name={this.state.name}  number={this.state.number} onFormSubmit={this.formSubmitHandler} />\r\n       \r\n\r\n        <h2 className={s.contactsTitle}>Contacts</h2>\r\n\r\n          {/* Это фильтр. Его значение мы не будем хранить в state стейте данной формы. Значение живого фильтра будет хранится в стейте App */}\r\n          <Filter value = {this.state.filter} handleFilter = {this.changeFilter}/>\r\n\r\n          {/* <ContactsList contacts={contacts} /> */}\r\n          <ContactsList contacts={visibleContacts} onDeleteContact = {this.deleteContact}/>       \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameTitle\":\"ContactForm_nameTitle__1Ziop\",\"inputStyleClass\":\"ContactForm_inputStyleClass__1i9qX\",\"addBtm\":\"ContactForm_addBtm__3YfBl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1QidY\",\"titlePhonebook\":\"App_titlePhonebook__bbAOY\",\"contactsTitle\":\"App_contactsTitle__2KXGH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsListTitle\":\"ContactsList_contactsListTitle__3OiEN\",\"item\":\"ContactsList_item__EuZth\",\"ContactsListStyle\":\"ContactsList_ContactsListStyle__ikrGv\",\"deleteBtn\":\"ContactsList_deleteBtn__3KAHG\"};"],"sourceRoot":""}